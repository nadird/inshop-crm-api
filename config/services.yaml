# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    locale: 'en'
    client_url: '%env(resolve:CLIENT_URL)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    api.event.jwt_created_listener:
        class: App\EventListener\JWTCreatedListener
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_created, method: onJWTCreated }

    api.event.authentication_success_listener:
        class: App\EventListener\AuthenticationSuccessListener
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_authentication_success, method: onAuthenticationSuccessResponse }

    app.entity_logger.subscriber:
        class: App\EventListener\Logger\EntityLoggerSubscriber
        arguments: ['@security.token_storage']
        tags:
            - { name: doctrine.event_subscriber, connection: default }

    App\EventListener\EntityRemoveListener:
        tags:
            - { name: doctrine.event_listener, event: preRemove }

    Liip\ImagineBundle\Imagine\Data\DataManager:
        alias: 'liip_imagine.data.manager'

    Liip\ImagineBundle\Imagine\Filter\FilterManager:
        alias: 'liip_imagine.filter.manager'

    gesdinet.jwtrefreshtoken.refresh_token_manager:
        class:  App\Service\RefreshTokenManager
        public: true
        arguments: [ '@gesdinet.jwtrefreshtoken.object_manager', '%gesdinet.jwtrefreshtoken.refresh_token.class%' ]
